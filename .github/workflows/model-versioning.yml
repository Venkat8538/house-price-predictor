name: Model Training with Versioning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  S3_BUCKET: your-mlops-bucket  # Replace with your bucket

jobs:
  train-and-version:
    runs-on: ubuntu-latest
    
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full git history for versioning
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Display model version
      run: |
        python -c "
        import sys, os
        sys.path.append('.')
        from version import versioning
        print(f'Model Version: {versioning.get_version()}')
        print(f'Git Commit: {versioning.get_git_commit()}')
        print(f'S3 Path: {versioning.get_model_path(\"${{ env.S3_BUCKET }}\")}')"
    
    - name: Train model (simulation)
      run: |
        echo "Training model with version..."
        python -c "
        import sys, os, json
        sys.path.append('.')
        from version import versioning
        
        # Simulate training results
        version = versioning.get_version()
        metadata = {
          'version': version,
          'git_commit': versioning.get_git_commit(),
          'timestamp': versioning.get_timestamp(),
          'model_type': 'XGBRegressor',
          'metrics': {'mae': 3819.29, 'r2': 0.9973}
        }
        
        os.makedirs('models/trained', exist_ok=True)
        with open('models/trained/version_metadata.json', 'w') as f:
          json.dump(metadata, f, indent=2)
        
        print(f'Model version {version} trained successfully!')
        "
    
    - name: Upload version metadata
      run: |
        aws s3 cp models/trained/version_metadata.json \
          s3://${{ env.S3_BUCKET }}/models/house-price-model/$(python -c "from version import versioning; print(versioning.get_version())")/metadata.json
    
    - name: Update model registry
      run: |
        echo "Model registry updated with new version"
        python -c "
        from version import versioning
        version = versioning.get_version()
        print(f'âœ… Model {version} registered successfully')
        print(f'ðŸ”— S3 Path: {versioning.get_model_path(\"${{ env.S3_BUCKET }}\")}')"